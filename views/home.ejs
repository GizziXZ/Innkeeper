<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/home.css">
    <title>Home</title>
</head>
<body>
    <div class="container">
        <aside class="sidebar">
            <div class="chat-list">
                <h2>Direct Messages</h2>
                <ul>
                    <!-- <li>User</li> -->
                </ul>
            </div>
            <div class="user-actions">
                <h4><%=username%></h4>
                <button class="friends-button" onclick="friends()">Friend Requests <span class="notification-circle"></span></button>
                <button class="add-user-button" onclick="addUser()">Add User</button>
            </div>
        </aside>
        <main class="content">
            <header>
                <h1 id="currentChat"></h1>
                <div class="header-buttons">
                    <button onclick="window.location.href='/profile'">Profile</button>
                    <button onclick="window.location.href='/logout'">Logout</button>
                </div>
            </header>
            <section class="messages">
                <!-- <div class="message">
                    <p><strong>User1:</strong> Hello!</p>
                </div>
                <div class="message">
                    <p><strong>User2:</strong> Hi User1!</p>
                </div> -->
            </section>
            <footer>
                <input type="text" placeholder="Type a message...">
            </footer>
        </main>
    </div>

    <!-- Modals -->
    <div id="addUserModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Add User</h2>
            <input type="text" id="usernameInput" placeholder="Enter username">
            <button onclick="submitUser()" id="add-button">Add</button>
        </div>
    </div>

    <div id="friendsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Friend Requests</h2>
            <ul>
                <!-- <li>Request</li> -->
            </ul>
        </div>
    </div>

    <script>
        try {
            (async () => {
                const chatlist = document.querySelector('.chat-list ul');
                let response = await fetch('/friends', { // Fetch the list of friends from the server
                    method: 'GET',
                    credentials: "include",
                })
                
                if (!response.ok) {
                    throw new Error('Failed to fetch friends');
                }

                let friends = await response.json();
                friends.forEach(friend => { // for every friend in the list, create a list item and append it to the chatlist
                    const li = document.createElement('li');
                    li.textContent = friend;
                    li.addEventListener('click', () => switchChat(friend)); // add an event listener to switch the chat to the selected friend
                    chatlist.appendChild(li);
                });
            })();
        } catch (err) {
            console.error(err);
        }

        function switchChat(friend) {
            // switch the chat to the selected friend
            document.getElementById('currentChat').textContent = friend;
            // going to make it so that the messages are saved only on the client side if possible for max privacy but transported using the server (once socket.io is implemented)
            const messagesContainer = document.querySelector('.messages');
            messagesContainer.innerHTML = ''; // Clear existing messages
        }

        async function friends() {
            document.getElementById('friendsModal').style.display = 'block'; // used to display the modal

            try {
                const response = await fetch('/friend-requests', { // Fetch the friend requests from the server
                    method: 'GET',
                    credentials: "include",
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch friend requests');
                }

                const friends = await response.json();
                const friendsList = document.querySelector('#friendsModal ul');
                friendsList.innerHTML = ''; // Clear existing list items

                friends.forEach(friend => { // for every friend in the list, create a list item and append it to the friendsList
                    const li = document.createElement('li');                    
                    li.textContent = friend;

                    const acceptButton = document.createElement('button');
                    acceptButton.textContent = 'Accept';
                    acceptButton.classList.add('friend-request-button', 'accept-button');
                    acceptButton.addEventListener('click', () => handleFriendRequest(friend, true));

                    const rejectButton = document.createElement('button');
                    rejectButton.textContent = 'Reject';
                    rejectButton.classList.add('friend-request-button', 'reject-button');
                    rejectButton.addEventListener('click', () => handleFriendRequest(friend, false));
                    
                    li.appendChild(acceptButton);
                    li.appendChild(rejectButton);
                    friendsList.appendChild(li);
                });
            } catch (err) {
                console.error(err);
            }
        }

        async function handleFriendRequest(friend, accept) {
            try {
                const response = await fetch('/friend-requests', { // fetch the friend requests from the server
                    method: 'POST',
                    credentials: "include",
                    body: `friend=${encodeURIComponent(friend)}&accept=${accept}`,
                    headers: {
                        'Content-type': 'application/x-www-form-urlencoded',
                    },
                });

                if (!response.ok) {
                    throw new Error('Failed to handle friend request');
                }

                const friendsList = document.querySelector('#friendsModal ul');
                friendsList.innerHTML = ''; // might not be necessary tbh
                friends(); // refresh the friend requests
            } catch (err) {
                console.error(err);
            }
        }

        function addUser() { // used to display the add friend modal
            document.getElementById('addUserModal').style.display = 'block';
        }

        function closeModal() { // just closes the modals
            document.getElementById('addUserModal').style.display = 'none';
            document.getElementById('friendsModal').style.display = 'none';
        }

        async function submitUser() { // used for adding friends
            const username = document.getElementById('usernameInput').value;
            if (username) {
                const response = await fetch('/add-friend', {
                    method: 'POST',
                    credentials: "include",
                    body: `friend=${encodeURIComponent(username)}`,
                    headers: {
                        'Content-type': 'application/x-www-form-urlencoded', // applcation/json doesn't work, i don't know why, i don't care why, i just want it to work. it's 7:40 am and i haven't slept
                    },
                })
                
                if (response.ok) {
                    alert('User ' + username + ' added!');
                } else if (response.status === 404) {
                    alert('User ' + username + ' not found!');
                } else if (response.status === 400) {
                    alert('User ' + username + ' is already a friend!');
                } else {
                    alert('Error adding user ' + username);
                }
                closeModal();
            }
        }
    </script>
</body>
</html>