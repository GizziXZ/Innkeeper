<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/home.css">
    <title>Home</title>
</head>
<body>
    <div class="container">
        <aside class="sidebar">
            <div class="chat-list">
                <h2>Direct Messages</h2>
                <ul>
                    <!-- <li>User</li> -->
                </ul>
                <div id="context-menu" class="context-menu">
                    <ul>
                        <li id="remove-friend" onclick="removeFriend()">Remove Friend</li>
                    </ul>
                </div>
            </div>
            <div class="user-actions">
                <h4><%=username%></h4>
                <button class="friends-button" onclick="friends()">Friend Requests <span class="notification-circle"></span></button>
                <button class="add-user-button" onclick="addUser()">Add User</button>
            </div>
        </aside>
        <main class="content">
            <header>
                <h1 id="currentChat"></h1>
                <div class="header-buttons">
                    <!-- <button onclick="window.location.href='/profile'">Profile</button> -->
                    <button onclick="window.location.href='/logout'">Logout</button>
                </div>
            </header>
            <section class="messages">
                <div class="welcome-message">
                    <h2>Welcome to Innkeeper!</h2>
                    <p>It looks like you haven't started a chat yet or you don't have any friends added.</p>
                    <p>Here are some tips to get started:</p>
                    <ul>
                        <li>Click on the "Add User" button to add new friends.</li>
                        <li>Once you have friends, click on their names to start chatting.</li>
                        <li>Use the "Friend Requests" button to manage your friend requests.</li>
                    </ul>
                    <button class="add-friend-button" onclick="addUser()">Add Your First Friend</button>
                </div>
                <!-- <div class="message">
                    <div class="message-header">
                        <span class="message-user">User1</span>
                        <span class="message-time">10:30 AM</span>
                    </div>
                    <p class="message-content">Hello!</p>
                </div> -->
            </section>
            <p id="typingIndicator"></p>
            <footer>
                <input id="messageInput" type="text" placeholder="Type a message..." autocomplete="off" disabled>
            </footer>
        </main>
    </div>

    <!-- Modals -->
    <div id="addUserModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Add User</h2>
            <input type="text" id="usernameInput" placeholder="Enter username" autocomplete="off">
            <button onclick="submitUser()" id="add-button">Add</button>
        </div>
    </div>

    <div id="friendsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Friend Requests</h2>
            <ul>
                <!-- <li>Request</li> -->
            </ul>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        let refreshPromise = null;
        refresh(); // refresh the chat list
        var socket = io({ // connect to the server
            auth: {
                token: document.cookie.split('=')[1]
            }
        });
        const messageInput = document.getElementById('messageInput');
        const messagesContainer = document.querySelector('.messages');

        messageInput.addEventListener('keypress', (event) => { // send message when enter is pressed
            if (event.key === 'Enter') {
                sendMessage();
            }
        });

        messageInput.addEventListener('input', () => { // send typing event to server
            socket.emit('typing', document.getElementById('currentChat').textContent);
        });

        socket.on('message', (message) => { // receive message from server
            // console.log(message);
            message.date = new Date();
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.innerHTML = `<div class="message-header">
                        <span class="message-user">${message.sender}</span>
                        <span class="message-time">${new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</span>
                    </div>
                    <p class="message-content" id="${message.id}">${message.text}</p>`;
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight; // scroll to the bottom of the messages
            document.getElementById('typingIndicator').style.display = 'none'; // stop typing indicator when message is received
            // save the messages locally instead of on the server for privacy
            const currentChat = document.getElementById('currentChat').textContent;
            const messages = JSON.parse(localStorage.getItem(currentChat)) || [];
            messages.push(message);
            localStorage.setItem(currentChat, JSON.stringify(messages));
        });

        socket.on('message-error', (message) => { // if the message fails to send (according to the server)
            const currentChat = document.getElementById('currentChat').textContent;
            const messagehtml = document.getElementById(message.id)
            messagehtml.style.color = 'crimson';
            messagehtml.parentElement.getElementsByClassName('message-time')[0].textContent = '(Failed to send, try to open chat again)';
            let messages = JSON.parse(localStorage.getItem(currentChat)) || [];
            const savedMessage = messages.find(m => m.id === message.id);
            messages = messages.filter(m => m.id !== message.id); // remove the message from the local storage
            localStorage.setItem(currentChat, JSON.stringify(messages));
        });

        socket.on('typing', (sender) => {
            if (sender !== document.getElementById('currentChat').textContent) return; // only show typing indicator if the sender is the current chat
            const typingIndicator = document.getElementById('typingIndicator');
            typingIndicator.innerText = `${sender} is typing...`;
            typingIndicator.style.display = 'block';

            // Hide the typing indicator after a few seconds
            setTimeout(() => {
                typingIndicator.style.display = 'none';
            }, 3000);
        });

        socket.on('friend-request', () => { // show notification when friend request is received
            const notificationCircle = document.querySelector('.notification-circle');
            notificationCircle.style.display = 'block';
        });

        socket.on('refresh', () => { // refresh the chat list when a friend is removed or a request is accepted
            refresh();
        });

        socket.on('online', async (friend) => { // show online status when a friend is online
            if (refreshPromise) await refreshPromise;
            const chatlist = document.querySelector('.chat-list ul');
            const friends = chatlist.getElementsByTagName('li');
            for (let i = 0; i < friends.length; i++) {
                if (friends[i].textContent === friend) {
                    friends[i].style.color = 'green';
                }
            }
        });

        socket.on('offline', (friend) => { // show offline status when a friend is offline
            const chatlist = document.querySelector('.chat-list ul');
            const friends = chatlist.getElementsByTagName('li');
            for (let i = 0; i < friends.length; i++) {
                if (friends[i].textContent === friend) {
                    friends[i].style.color = 'white';
                }
            }
        });

        document.getElementsByClassName('messages')[0].addEventListener('click', () => { // focus on the chat input, for convenience
            messageInput.focus();
        })

        function sendMessage() { // send message to server
            const message = messageInput.value;
            if (message) {
                socket.emit('message', { // send message to server
                    text: message,
                    sender: document.cookie.split('=')[1],
                    recipient: document.getElementById('currentChat').textContent,
                });
                messageInput.value = ''; // clear the input field
            }
        }

        function refresh() {
            try {
                refreshPromise = new Promise(async (resolve) => {
                const chatlist = document.querySelector('.chat-list ul');
                const currentChat = document.getElementById('currentChat');
                // chatlist.innerHTML = ''; // Clear existing list items
                let response = await fetch('/friends', { // Fetch the list of friends from the server
                    method: 'GET',
                    credentials: "include",
                })
                
                if (!response.ok) {
                    throw new Error('Failed to fetch friends');
                }

                let friends = await response.json();
                await friends.forEach(friend => { // for every friend in the list, create a list item and append it to the chatlist
                    const li = document.createElement('li');
                    const notificationCircle = document.createElement('span');
                    notificationCircle.classList.add('notification-circle');
                    
                    li.textContent = friend;
                    li.addEventListener('click', () => { // switch the chat to the selected friend
                        messageInput.removeAttribute('disabled'); // enable the message input field
                        document.getElementById('typingIndicator').style.display = 'none'; // stop typing indicator when switching chats
                        currentChat.textContent = friend;
                        messagesContainer.innerHTML = ''; // Clear existing messages
                        const messages = JSON.parse(localStorage.getItem(friend)) || []; // load the messages from the local storage
                        messages.forEach(message => {
                            if (message.sender !== document.getElementsByClassName('user-actions')[0].getElementsByTagName('h4')[0].textContent && message.recipient !== document.getElementsByClassName('user-actions')[0].getElementsByTagName('h4')[0].textContent) return; // only show messages that are sent to or from the current user
                            const messageElement = document.createElement('div');
                            messageElement.classList.add('message');
                            messageElement.innerHTML = `<div class="message-header">
                                <span class="message-user">${message.sender}</span>
                                <span class="message-time">${new Date(message.date).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</span>
                                </div>
                                <p class="message-content">${message.text}</p>`;
                            messagesContainer.appendChild(messageElement);
                        });
                        messagesContainer.scrollTop = messagesContainer.scrollHeight; // scroll to the bottom of the messages
                        messageInput.focus();
                        socket.emit('open-room', friend);
                    });
                    li.addEventListener('contextmenu', (event) => { // right click to open context menu
                        event.preventDefault();
                        const contextMenu = document.getElementById('context-menu');
                        contextMenu.style.display = 'block';
                        contextMenu.style.left = event.clientX + 'px';
                        contextMenu.style.top = event.clientY + 'px';
                        contextMenu.friend = friend;
                    });
                    chatlist.appendChild(li);
                });

                document.addEventListener('click', (event) => { // close context menu when clicking outside of it
                    const contextMenu = document.getElementById('context-menu');
                    if (event.target !== contextMenu && !contextMenu.contains(event.target)) {
                        contextMenu.style.display = 'none';
                    }
                });
                resolve();
            })
            } catch (err) {
                console.error(err);
            }
        }

        async function friends() {
            document.getElementById('friendsModal').style.display = 'block'; // used to display the modal
            try {
                const response = await fetch('/friend-requests', { // Fetch the friend requests from the server
                    method: 'GET',
                    credentials: "include",
                });
                if (!response.ok) {
                    throw new Error('Failed to fetch friend requests');
                }

                const friends = await response.json();
                const friendsList = document.querySelector('#friendsModal ul');
                friendsList.innerHTML = ''; // Clear existing list items

                friends.forEach(friend => { // for every friend in the list, create a list item and append it to the friendsList
                    const li = document.createElement('li');                    
                    li.textContent = friend;

                    const acceptButton = document.createElement('button');
                    acceptButton.textContent = 'Accept';
                    acceptButton.classList.add('friend-request-button', 'accept-button');
                    acceptButton.addEventListener('click', () => handleFriendRequest(friend, true));

                    const rejectButton = document.createElement('button');
                    rejectButton.textContent = 'Reject';
                    rejectButton.classList.add('friend-request-button', 'reject-button');
                    rejectButton.addEventListener('click', () => handleFriendRequest(friend, false));
                    
                    li.appendChild(acceptButton);
                    li.appendChild(rejectButton);
                    friendsList.appendChild(li);
                });

                if (friends.length === 0) { // if there are no friend requests, display a message
                    const li = document.createElement('li');
                    li.textContent = 'No friend requests';
                    friendsList.appendChild(li);
                    document.querySelector('.notification-circle').style.display = 'none'; // hide the notification circle
                }
            } catch (err) {
                console.error(err);
            }
        }

        async function handleFriendRequest(friend, accept) {
            try {
                const response = await fetch('/friend-requests', { // fetch the friend requests from the server
                    method: 'POST',
                    credentials: "include",
                    body: `friend=${encodeURIComponent(friend)}&accept=${accept}`,
                    headers: {
                        'Content-type': 'application/x-www-form-urlencoded',
                    },
                });

                if (!response.ok) {
                    throw new Error('Failed to handle friend request');
                }

                const friendsList = document.querySelector('#friendsModal ul');
                friendsList.innerHTML = ''; // might not be necessary tbh
                friends(); // refresh the friend requests
                refresh(); // refresh the chat list
            } catch (err) {
                console.error(err);
            }
        }

        async function removeFriend(friend) {
            try {
                const contextMenu = document.getElementById('context-menu');
                const response = await fetch('/remove-friend', {
                    method: 'POST',
                    credentials: "include",
                    body: `friend=${encodeURIComponent(contextMenu.friend)}`,
                    headers: {
                        'Content-type': 'application/x-www-form-urlencoded',
                    },
                });

                if (!response.ok) {
                    throw new Error('Failed to remove friend');
                }

                contextMenu.style.display = 'none';
                const chatlist = document.querySelector('.chat-list ul');
                chatlist.innerHTML = ''; // Clear existing list items
                refresh();
            } catch (err) {
                console.error(err);
            }
            
        }

        function addUser() { // used to display the add friend modal
            document.getElementById('addUserModal').style.display = 'block';
        }

        function closeModal() { // just closes the modals
            document.getElementById('addUserModal').style.display = 'none';
            document.getElementById('friendsModal').style.display = 'none';
        }

        async function submitUser() { // used for adding friends
            const username = document.getElementById('usernameInput').value;
            if (username) {
                const response = await fetch('/add-friend', {
                    method: 'POST',
                    credentials: "include",
                    body: `friend=${encodeURIComponent(username)}`,
                    headers: {
                        'Content-type': 'application/x-www-form-urlencoded', // applcation/json doesn't work, i don't know why, i don't care why, i just want it to work. it's 7:40 am and i haven't slept
                    },
                })
                
                if (response.ok) {
                    alert('User ' + username + ' added!');
                } else if (response.status === 404) {
                    alert('User ' + username + ' not found!');
                } else if (response.status === 400) {
                    alert('User ' + username + ' is already a friend!');
                } else {
                    alert('Error adding user ' + username);
                }
                closeModal();
            }
        }
    </script>
</body>
</html>